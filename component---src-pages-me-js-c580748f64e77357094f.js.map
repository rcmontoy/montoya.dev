{"version":3,"sources":["webpack:///./src/pages/me.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/SEO.js","webpack:///./src/components/Header.js","webpack:///./src/components/Layout.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_Layout__WEBPACK_IMPORTED_MODULE_1__","_components_SEO__WEBPACK_IMPORTED_MODULE_2__","_me_module_css__WEBPACK_IMPORTED_MODULE_3__","_me_module_css__WEBPACK_IMPORTED_MODULE_3___default","AboutPage","a","createElement","title","className","styles","text","href","m","module","exports","require","default","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","loader","enqueue","React","createContext","ProdPageRenderer","_ref","location","pageResources","InternalPageRenderer","Object","assign","json","SEO","props","description","lang","meta","blogPost","site","_public_static_d_300035707_json__WEBPACK_IMPORTED_MODULE_1__","data","metaDescription","siteMetadata","mergedMeta","name","content","property","author","concat","react__WEBPACK_IMPORTED_MODULE_2___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","defaultProps","NAV_LINKS","path","Header","react_default","root","nav","brand","gatsby_browser_entry","to","titleLink","links","map","link","key","activeClassName","linkActive","Layout","children","Fragment","components_Header","style","margin","maxWidth","padding","paddingTop"],"mappings":"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","file":"component---src-pages-me-js-c580748f64e77357094f.js","sourcesContent":["import React from 'react';\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\n\nimport styles from './me.module.css';\n\nconst AboutPage = () => (\n  <Layout>\n    <SEO title=\"About me\" />\n    <h1>Hello, I‚Äôm Ryan.</h1>\n\n    <p className={styles.text}>\n      {'I‚Äôm a software engineer building a marketplace for insurance linked securities at '}\n      <a href=\"https://www.ledgerinvesting.com\">Ledger Investing</a>\n      {'. During my free time, I enjoy staying up to date with the latest software trends, casually playing '}\n      <a href=\"https://fortnitetracker.com/profile/pc/Rickl_Pick\">Fortnite</a>\n      {', taking photos, and spending time with my lovely wife.'}\n    </p>\n\n    <p className={styles.text}>\n      {`I love exploring and geeking out on things. Anything from tech and audio gear to the\n        stock market market to denim jackets and sewing. Because of this, I spend a lot of time and\n        effort thinking about, researching, and evaluating the things that I do and use in my life.\n        I‚Äôd love to share some of things that I‚Äôm interested in through candid, no bullshit articles.\n        Cheers if you‚Äôre still reading this and don‚Äôt hesitate to say hi! üçª`}\n    </p>\n  </Layout>\n);\n\nexport default AboutPage;\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { graphql, useStaticQuery } from 'gatsby';\n\n\nconst SEO = (props) => {\n  const {\n    description,\n    lang,\n    meta,\n    title,\n    blogPost,\n  } = props;\n\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            name\n            description\n            author\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  // merge with meta passed in as props\n  const mergedMeta = [\n    {\n      name: 'description',\n      content: metaDescription,\n    },\n\n    /**\n     * OpenGraph\n     */\n    {\n      property: 'og:title',\n      content: title,\n    },\n    {\n      property: 'og:description',\n      content: metaDescription,\n    },\n    {\n      property: 'og:type',\n      content: blogPost ? 'article' : 'website',\n    },\n\n    /**\n     * Twitter\n     */\n    {\n      name: 'twitter:card',\n      content: 'summary',\n    },\n    {\n      name: 'twitter:creator',\n      content: site.siteMetadata.author,\n    },\n    {\n      name: 'twitter:title',\n      content: title,\n    },\n    {\n      name: 'twitter:description',\n      content: metaDescription,\n    },\n  ].concat(meta);\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s - ${site.siteMetadata.name}`}\n      meta={mergedMeta}\n    />\n  );\n};\n\nSEO.defaultProps = {\n  lang: 'en',\n  meta: [],\n  description: '',\n  blogPost: false,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n  blogPost: PropTypes.bool,\n};\n\nexport default SEO;\n","import { Link } from 'gatsby';\nimport React from 'react';\n\nimport styles from './Header.module.css';\n\nconst NAV_LINKS = [\n  {\n    path: '/me',\n    name: 'Me',\n  },\n  {\n    path: '/contact',\n    name: 'Contact',\n  },\n];\n\nconst Header = () => (\n  <header className={styles.root}>\n    <nav className={styles.nav}>\n      <div className={styles.brand}>\n        <h1 className={styles.title}>\n          <Link to=\"/\" className={styles.titleLink}>\n            Ryan Montoya\n          </Link>\n        </h1>\n      </div>\n      <div className={styles.links}>\n        {NAV_LINKS.map((link) => (\n          <Link\n            to={link.path}\n            key={link.path}\n            activeClassName={styles.linkActive}\n            className={styles.link}\n          >\n            {link.name}\n          </Link>\n        ))}\n      </div>\n    </nav>\n  </header>\n);\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from './Header';\n\nconst Layout = ({ children }) => (\n  <>\n    <Header />\n    <div\n      style={{\n        margin: '0 auto',\n        maxWidth: 960,\n        padding: '0px 1.0875rem 1.45rem',\n        paddingTop: 0,\n      }}\n    >\n      <main>{children}</main>\n      <footer />\n    </div>\n  </>\n);\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n"],"sourceRoot":""}