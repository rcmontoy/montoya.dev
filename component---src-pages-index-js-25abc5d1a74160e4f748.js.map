{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/SEO.js","webpack:///./src/components/Header.js","webpack:///./src/components/Layout.js","webpack:///./src/components/PostList.js"],"names":["IndexPage","posts","edges","map","edge","node","convertEdgesToPosts","_public_static_d_3686085190_json__WEBPACK_IMPORTED_MODULE_0__","data","allMarkdownRemark","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_Layout__WEBPACK_IMPORTED_MODULE_3__","_components_SEO__WEBPACK_IMPORTED_MODULE_4__","title","className","styles","hero","headline","intro","_components_PostList__WEBPACK_IMPORTED_MODULE_5__","m","module","exports","require","default","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","__webpack_exports__","loader","enqueue","React","createContext","ProdPageRenderer","_ref","location","pageResources","InternalPageRenderer","Object","assign","json","SEO","props","description","lang","meta","blogPost","site","_public_static_d_300035707_json__WEBPACK_IMPORTED_MODULE_1__","metaDescription","siteMetadata","mergedMeta","name","content","property","author","concat","react__WEBPACK_IMPORTED_MODULE_2___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","defaultProps","NAV_LINKS","path","Header","react_default","root","nav","brand","gatsby_browser_entry","to","titleLink","links","link","key","activeClassName","linkActive","Layout","children","Fragment","components_Header","style","margin","maxWidth","padding","paddingTop","gatsby__WEBPACK_IMPORTED_MODULE_1__","PostList","post","_post$frontmatter","frontmatter","date"],"mappings":"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","file":"component---src-pages-index-js-25abc5d1a74160e4f748.js","sourcesContent":["import React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport styles from './index.module.css';\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\nimport PostList from '../components/PostList';\n\nconst convertEdgesToPosts = (edges) => edges.map((edge) => edge.node);\n\nconst IndexPage = () => {\n  const { allMarkdownRemark } = useStaticQuery(\n    graphql`\n      query {\n        allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n          edges {\n            node {\n              id\n              excerpt(pruneLength: 250)\n              frontmatter {\n                date(formatString: \"MMMM DD, YYYY\")\n                path\n                title\n              }\n            }\n          }\n        }\n      }\n    `,\n  );\n\n  const { edges } = allMarkdownRemark;\n  const posts = convertEdgesToPosts(edges);\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <div className={styles.hero}>\n        <h1 className={styles.headline}>{'Hi, I\\'m Ryan'}</h1>\n        <p className={styles.intro}>\n          {`I share my love for writing software, great products, and technology with \n          in-depth articles and detailed tutorials.`}\n        </p>\n        <PostList posts={posts} />\n      </div>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { graphql, useStaticQuery } from 'gatsby';\n\n\nconst SEO = (props) => {\n  const {\n    description,\n    lang,\n    meta,\n    title,\n    blogPost,\n  } = props;\n\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            name\n            description\n            author\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  // merge with meta passed in as props\n  const mergedMeta = [\n    {\n      name: 'description',\n      content: metaDescription,\n    },\n\n    /**\n     * OpenGraph\n     */\n    {\n      property: 'og:title',\n      content: title,\n    },\n    {\n      property: 'og:description',\n      content: metaDescription,\n    },\n    {\n      property: 'og:type',\n      content: blogPost ? 'article' : 'website',\n    },\n\n    /**\n     * Twitter\n     */\n    {\n      name: 'twitter:card',\n      content: 'summary',\n    },\n    {\n      name: 'twitter:creator',\n      content: site.siteMetadata.author,\n    },\n    {\n      name: 'twitter:title',\n      content: title,\n    },\n    {\n      name: 'twitter:description',\n      content: metaDescription,\n    },\n  ].concat(meta);\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s - ${site.siteMetadata.name}`}\n      meta={mergedMeta}\n    />\n  );\n};\n\nSEO.defaultProps = {\n  lang: 'en',\n  meta: [],\n  description: '',\n  blogPost: false,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n  blogPost: PropTypes.bool,\n};\n\nexport default SEO;\n","import { Link } from 'gatsby';\nimport React from 'react';\n\nimport styles from './Header.module.css';\n\nconst NAV_LINKS = [\n  {\n    path: '/me',\n    name: 'Me',\n  },\n  {\n    path: '/contact',\n    name: 'Contact',\n  },\n];\n\nconst Header = () => (\n  <header className={styles.root}>\n    <nav className={styles.nav}>\n      <div className={styles.brand}>\n        <h1 className={styles.title}>\n          <Link to=\"/\" className={styles.titleLink}>\n            Ryan Montoya\n          </Link>\n        </h1>\n      </div>\n      <div className={styles.links}>\n        {NAV_LINKS.map((link) => (\n          <Link\n            to={link.path}\n            key={link.path}\n            activeClassName={styles.linkActive}\n            className={styles.link}\n          >\n            {link.name}\n          </Link>\n        ))}\n      </div>\n    </nav>\n  </header>\n);\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from './Header';\n\nconst Layout = ({ children }) => (\n  <>\n    <Header />\n    <div\n      style={{\n        margin: '0 auto',\n        maxWidth: 960,\n        padding: '0px 1.0875rem 1.45rem',\n        paddingTop: 0,\n      }}\n    >\n      <main>{children}</main>\n      <footer />\n    </div>\n  </>\n);\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nconst PostList = ({ posts }) => (\n  <ul>\n    {posts.map((post) => {\n      const { frontmatter: { date, path, title } } = post;\n      return (\n        <li key={path}>\n          {date}\n          {' - '}\n          <Link to={path} key={title}>\n            {title}\n          </Link>\n        </li>\n      );\n    })}\n  </ul>\n);\n\nexport default PostList;\n"],"sourceRoot":""}