{"version":3,"sources":["webpack:///./src/components/PostList.js","webpack:///./src/pages/blog.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/Header.js","webpack:///./src/components/Layout.js","webpack:///./src/components/SEO.js"],"names":["PostList","_ref","posts","react_default","a","createElement","map","post","_post$frontmatter","frontmatter","date","path","title","key","gatsby_browser_entry","to","__webpack_require__","d","__webpack_exports__","pageQuery","Blog","edges","edge","node","convertEdgesToPosts","data","allMarkdownRemark","Layout","SEO","components_PostList","m","module","exports","require","default","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","loader","enqueue","React","createContext","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json","NAV_LINKS","name","Header","className","styles","root","navContainer","titleLink","links","link","activeClassName","linkActive","children","Fragment","components_Header","style","margin","maxWidth","padding","paddingTop","description","lang","meta","site","_public_static_d_300035707_json__WEBPACK_IMPORTED_MODULE_1__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_2___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","content","property","author","concat","defaultProps"],"mappings":"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","file":"component---src-pages-blog-js-80c33b5396bddf64f84c.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\n\nconst PostList = ({ posts }) => (\n  <ul>\n    {posts.map((post) => {\n      const { frontmatter: { date, path, title } } = post;\n      return (\n        <li key={path}>\n          {date}\n          {' - '}\n          <Link to={path} key={title}>\n            {title}\n          </Link>\n        </li>\n      );\n    })}\n  </ul>\n);\n\nexport default PostList;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport PropTypes from 'prop-types';\n\nimport Layout from '../components/Layout';\nimport PostList from '../components/PostList';\nimport SEO from '../components/SEO';\n\nconst convertEdgesToPosts = (edges) => edges.map((edge) => edge.node);\n\nconst Blog = ({ data }) => {\n  const { edges } = data.allMarkdownRemark;\n  const posts = convertEdgesToPosts(edges);\n  return (\n    <Layout>\n      <SEO title=\"Blog\" />\n      <h1>Blog</h1>\n      <PostList posts={posts} />\n    </Layout>\n  );\n};\n\nBlog.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(PropTypes.shape({})),\n    }),\n  }).isRequired,\n};\n\nexport default Blog;\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { Link } from 'gatsby';\nimport React from 'react';\n\nimport styles from './Header.module.css';\n\nconst NAV_LINKS = [\n  {\n    path: '/blog',\n    name: 'Blog',\n  },\n  {\n    path: '/me',\n    name: 'Me',\n  },\n  {\n    path: '/contact',\n    name: 'Contact',\n  },\n];\n\nconst Header = () => (\n  <header className={styles.root}>\n    <nav className={styles.navContainer}>\n      <h1 className={styles.title}>\n        <Link to=\"/\" className={styles.titleLink}>\n          Ryan Montoya\n        </Link>\n      </h1>\n      <div className={styles.links}>\n        {NAV_LINKS.map((link) => (\n          <Link\n            to={link.path}\n            key={link.path}\n            activeClassName={styles.linkActive}\n            className={styles.link}\n          >\n            {link.name}\n          </Link>\n        ))}\n      </div>\n    </nav>\n  </header>\n);\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from './Header';\n\nconst Layout = ({ children }) => (\n  <>\n    <Header />\n    <div\n      style={{\n        margin: '0 auto',\n        maxWidth: 960,\n        padding: '0px 1.0875rem 1.45rem',\n        paddingTop: 0,\n      }}\n    >\n      <main>{children}</main>\n      <footer />\n    </div>\n  </>\n);\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({\n  description, lang, meta, title,\n}) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            name\n            description\n            author\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s - ${site.siteMetadata.name}`}\n      meta={[\n        {\n          name: 'description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:title',\n          content: title,\n        },\n        {\n          property: 'og:description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:type',\n          content: 'website',\n        },\n        {\n          name: 'twitter:card',\n          content: 'summary',\n        },\n        {\n          name: 'twitter:creator',\n          content: site.siteMetadata.author,\n        },\n        {\n          name: 'twitter:title',\n          content: title,\n        },\n        {\n          name: 'twitter:description',\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: 'en',\n  meta: [],\n  description: '',\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n"],"sourceRoot":""}